#!/usr/bin/env python3

import os

# Makefile target, with own dependencies
class Target:
    def __init__(self, nm="", dps=[]):
        self.name = nm
        self.dependencies = dps

# Class used to store MAKEFILE information
class MakeFile:
    def __init__(self, flgs=[], trgs=[], cmplr="", lbs=[], dps=[]):
        self.flags = flgs
        self.targets = trgs
        self.compiler = cmplr
        self.libraries = lbs
        self.dependencies = dps

    def to_file(self, dr):
        """
        Write MakeFile to 'dr/makefile'
        """
        fileName = os.path.join(dr, "makefile")
        with open(fileName, "w") as f:
            f.write(
                "# This makefile was automatically generated by CMS,"
                " a Course Management System\n"
            )
            f.writelines(f"CC = {self.compiler}\n")
            flgString = concat(self.flags, sep=" ")
            f.writelines(f"CXXFLAGS = {flgString}\n")
            f.writelines("\n")

            trgString = concat([t.name for t in self.targets], sep=" ")
            f.writelines(f"TRGS = {trgString}\n")
            f.writelines("\n")

            f.writelines("all: ${TRGS}\n\n")

            for targ in self.targets:
                f.write(f"{targ.name}:{concat(targ.dependencies, sep=' ')}\n\n")

            f.writelines("clean:\n" "\t${RM} ${TRGS}\n")


def concat(ls, sep=",") -> str:
    return sep.join(ls) if ls is not None else ""
